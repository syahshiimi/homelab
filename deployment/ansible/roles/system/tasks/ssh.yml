---
- name: Ensure local .ssh directory exists
  file:
    path: "~/.ssh"
    state: directory
    mode: '0700'
  delegate_to: localhost
  become: false

- name: Check if SSH key already exists for host
  stat:
    path: "~/.ssh/{{ inventory_hostname }}"
  delegate_to: localhost
  register: ssh_key_exists
  become: false

# Only generate key if it doesn't exist
- name: Generate unique ED25519 SSH key per host
  command:
    cmd: "ssh-keygen -o -a 100 -t ed25519 -f ~/.ssh/{{ inventory_hostname }} -C syahrlanuar95@gmail.com -N ''"
  delegate_to: localhost
  become: false
  when: not ssh_key_exists.stat.exists

- name: Ensure target .ssh directory exists
  file:
    path: "/home/{{ ansible_user }}/.ssh"
    state: directory
    mode: '0700'
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"
  become: true

# Check if our key is already in authorized_keys
- name: Check if key is already authorized
  shell: "grep -f ~/.ssh/{{ inventory_hostname }}.pub /home/{{ ansible_user }}/.ssh/authorized_keys || true"
  delegate_to: localhost
  register: key_authorized
  changed_when: false
  become: false

# Only copy if key isn't already authorized
- name: Copy SSH key to remote host
  command:
    cmd: "ssh-copy-id -i ~/.ssh/{{ inventory_hostname }} {{ ansible_user }}@{{ ansible_host }}"
  delegate_to: localhost
  become: false
  when: key_authorized.stdout == ""

# Check if SSH config entry already exists
- name: Check if SSH config entry exists
  command: "grep -q 'Host {{ inventory_hostname }}' ~/.ssh/config"
  delegate_to: localhost
  register: config_exists
  failed_when: false
  changed_when: false
  become: false

# Only create config if it doesn't exist
- name: Create SSH config entry in the local machine
  blockinfile:
    path: "~/.ssh/config"
    create: yes
    mode: '0600'
    block: |
      Host {{ inventory_hostname }}
        HostName {{ ansible_host }}
        User {{ ansible_user }}
        IdentityFile ~/.ssh/{{ inventory_hostname }}
  delegate_to: localhost
  become: false
  when: config_exists.rc != 0

- name: Update SSH configuration to be more secure
  lineinfile:
    dest: "{{ security_ssh_config_path }}"
    regexp: "{{ item.regexp }}"
    line: "{{ item.line }}"
    state: present
    validate: 'sshd -T -f %s'
    mode: 0644
  with_items:
    - regexp: "^PasswordAuthentication"
      line: "PasswordAuthentication {{ security_ssh_password_authentication }}"
    - regexp: "^PermitRootLogin"
      line: "PermitRootLogin {{ security_ssh_permit_root_login }}"
    - regexp: "^Port"
      line: "Port {{ security_ssh_port }}"
    - regexp: "^UseDNS"
      line: "UseDNS {{ security_ssh_usedns }}"
    - regexp: "^PermitEmptyPasswords"
      line: "PermitEmptyPasswords {{ security_ssh_permit_empty_password }}"
    - regexp: "^ChallengeResponseAuthentication"
      line: "ChallengeResponseAuthentication {{ security_ssh_challenge_response_auth }}"
    - regexp: "^GSSAPIAuthentication"
      line: "GSSAPIAuthentication {{ security_ssh_gss_api_authentication }}"
    - regexp: "^X11Forwarding"
      line: "X11Forwarding {{ security_ssh_x11_forwarding }}"
  notify: Restart SSH Service